<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- id 값을 insertMember로 작성했다면
	Java 파일에서 Mapper, Service, Controller 모두 insertMember로 통일!
	통일을 안해도 되긴 하지만
	Spring Boot는 @(어노테이션)과 properties에 작성한
	작성경로를 통해 임의적으로 이동하기 때문에
	이름이 다른 경우에는 파일의 위치를 찾지 못하거나 실행이 안될 수 있음 -->
<!-- mapper로 sql 작성이 어디서부터 시작해서 어디까지 인지 범위를 설정 -->
<mapper namespace="com.example.mapper.MemberMapper">
   <!-- namespace : 나중에 java 파일 중에서 어떤 파일로 DB 작성 내용을 전달받고 전달할지 파일 지정 -->
	<insert id="insertMember" parameterType="com.example.demo.dto.Member">
	   <!-- id : id는 나중에 MemberMapper로 만든 interface에 전달할 명칭 -->
	                     <!-- parameterType : dto 중에서 어떤 dto 파일을 바라볼지 선택 -->
		INSERT INTO member(member_id, member_name, member_age, member_phone)
		<!-- DB에 저장된 컬럼 명 (member_id, member_name, member_age, member_phone -->
		VALUES (member_seq.NEXTVAL, #{memberName}, #{memberAge}, #{memberPhone})
		<!-- DTO폴더 밑에 작성된 Member 객체 안에 적혀있는 변수명들을 작성 -->
	</insert>
	<!-- insert와 마찬가지로 select, update, delete 작성해주면 됨
		 select는 parameter 값이 들어가는 것이 아니라
		 resultSet을 사용해서 검색이나 조회한 결과를 자바에 전달 함 -->
</mapper>